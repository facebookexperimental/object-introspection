[info]
type_name = "std::multimap"
stub_template_params = [2,3]
ctype = "MULTI_MAP_TYPE"
header = "map"

# Old:
typeName = "std::multimap"
ns = ["namespace std"]
numTemplateParams = 2
replaceTemplateParamIndex = [2]
allocatorIndex = 3

[codegen]
decl = """
template<class Key, class T, class Compare, class Allocator>
void getSizeType(const %1%<Key,T,Compare,Allocator> &container, size_t& returnArg);
"""

func = """
template<class Key, class T, class Compare, class Allocator>
void getSizeType(const %1%<Key,T,Compare,Allocator> &container, size_t& returnArg)
{
    SAVE_SIZE(sizeof(%1%<Key,T,Compare,Allocator>));

    SAVE_DATA((uintptr_t)container.size());

    for (auto const& it : container)
    {
    getSizeType(it.first, returnArg);
    getSizeType(it.second, returnArg);
    }
}
"""

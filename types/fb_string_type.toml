[info]
typeName = "folly::basic_fbstring<"
numTemplateParams = 1
ctype = "FB_STRING_TYPE"
header = "folly/FBString.h"
ns = ["folly::basic_fbstring", "folly::fbstring_core"]
replaceTemplateParamIndex = []
#Â allocatorIndex = 0
# underlyingContainerIndex = 0

[codegen]
decl = """
template <typename E,class T,class A,class Storage>
void getSizeType(const %1%<E, T, A, Storage> &t, size_t& returnArg);
"""

func = """
template <typename E,class T,class A,class Storage>
void getSizeType(const %1%<E, T, A, Storage> &t, size_t& returnArg)
{
    SAVE_SIZE(sizeof(%1%<E, T, A, Storage>));

    SAVE_DATA((uintptr_t)(t.data()));
    SAVE_DATA((uintptr_t)t.capacity());
    SAVE_DATA((uintptr_t)t.size());

    bool inlined = ((uintptr_t)t.data() < (uintptr_t)(&t + sizeof(%1%<E, T, A, Storage>)))
        &&
      ((uintptr_t)t.data() >= (uintptr_t)&t);

    if (!inlined && pointers.add((uintptr_t)t.data())) {
      SAVE_SIZE(t.capacity() * sizeof(T));
      SAVE_DATA(1);
    } else {
      SAVE_DATA(0);
    }
}
"""

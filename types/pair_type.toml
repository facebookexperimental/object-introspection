[info]
type_name = "std::pair"
ctype = "PAIR_TYPE"
header = "utility"

# Old:
typeName = "std::pair<"
ns = ["namespace std"]
numTemplateParams = 2
replaceTemplateParamIndex = []

[codegen]
decl = """
template<typename P, typename Q>
void getSizeType(const %1%<P,Q> &container, size_t& returnArg);
"""

func = """
template<typename P, typename Q>
void getSizeType(const %1%<P,Q> &container, size_t& returnArg)
{
    SAVE_SIZE(sizeof(%1%<P,Q>) - sizeof(P) - sizeof(Q));

    getSizeType(container.first, returnArg);
    getSizeType(container.second, returnArg);
}
"""

handler = """
template <typename DB, typename T0, typename T1>
struct TypeHandler<DB, %1%<T0, T1>> {
  using type = types::st::Pair<DB,
      typename TypeHandler<DB, T0>::type,
      typename TypeHandler<DB, T1>::type>;

  static types::st::Unit<DB> getSizeType(
      const %1%<T0, T1> & container,
      typename TypeHandler<DB, %1%<T0, T1>>::type returnArg) {
    return OIInternal::getSizeType<DB>(
        container.second,
        returnArg.delegate([&container](auto ret) {
            return OIInternal::getSizeType<DB>(container.first, ret);
        })
    );
  }
};
"""

traversal_func = """
    return OIInternal::getSizeType<DB>(
        container.second,
        returnArg.delegate([&container](auto ret) {
            return OIInternal::getSizeType<DB>(container.first, ret);
        })
    );
"""

[[codegen.processor]]
type = "types::st::Pair<DB, typename TypeHandler<DB, T0>::type, typename TypeHandler<DB, T1>::type>"
func = """
static constexpr std::array<std::string_view, 1> names{"TODO"};
static constexpr auto firstField = inst::Field{
  sizeof(T0),
  "first",
  names,
  TypeHandler<DB, T0>::fields,
  TypeHandler<DB, T0>::processors,
};
static constexpr auto secondField = inst::Field{
  sizeof(T1),
  "second",
  names,
  TypeHandler<DB, T1>::fields,
  TypeHandler<DB, T1>::processors,
};

el.exclusive_size = sizeof(std::pair<T0, T1>) - sizeof(T0) - sizeof(T1);
ins.emplace(secondField);
ins.emplace(firstField);
"""

[info]
type_name = "std::pair"
ctype = "PAIR_TYPE"
header = "utility"

# Old:
typeName = "std::pair<"
ns = ["namespace std"]
numTemplateParams = 2
replaceTemplateParamIndex = []

[codegen]
decl = """
template<typename P, typename Q>
void getSizeType(const %1%<P,Q> &container, size_t& returnArg);
"""

func = """
template<typename P, typename Q>
void getSizeType(const %1%<P,Q> &container, size_t& returnArg)
{
    SAVE_SIZE(sizeof(%1%<P,Q>) - sizeof(P) - sizeof(Q));

    getSizeType(container.first, returnArg);
    getSizeType(container.second, returnArg);
}
"""

traversal_func = """
    return OIInternal::getSizeType<Ctx>(
        container.second,
        returnArg.delegate([&container](auto ret) {
            return OIInternal::getSizeType<Ctx>(container.first, ret);
        })
    );
"""

[[codegen.processor]]
type = "types::st::Pair<DB, typename TypeHandler<Ctx, T0>::type, typename TypeHandler<Ctx, T1>::type>"
func = """
static constexpr auto firstField = make_field<Ctx, T0>("first");
static constexpr auto secondField = make_field<Ctx, T1>("second");

el.exclusive_size = sizeof(std::pair<T0, T1>) - sizeof(T0) - sizeof(T1);
stack_ins(secondField);
stack_ins(firstField);
"""

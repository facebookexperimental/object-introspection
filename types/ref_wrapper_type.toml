[info]
type_name = "std::reference_wrapper"
ctype = "REF_WRAPPER_TYPE"
header = "functional"

# Old:
typeName = "std::reference_wrapper<"
ns = ["namespace std"]
numTemplateParams = 1
replaceTemplateParamIndex = []

[codegen]
decl = """
template<typename T>
void getSizeType(const %1%<T> &ref, size_t& returnArg);
"""

func = """
template<typename T>
void getSizeType(const %1%<T> &ref, size_t& returnArg)
{
    SAVE_SIZE(sizeof(%1%<T>));
    SAVE_DATA((uintptr_t)&(ref.get()));
    if (pointers.add((uintptr_t)&ref.get())) {
        SAVE_DATA(1);
        getSizeType(ref.get(), returnArg);
    } else {
        SAVE_DATA(0);
    }
}
"""

handler = """
template <typename DB, typename T0>
struct TypeHandler<DB, %1%<T0>> {
    using type = types::st::Pair<DB,
      types::st::VarInt<DB>,
      types::st::Sum<DB,
        types::st::Unit<DB>,
        typename TypeHandler<DB, T0>::type
    >>;

    static types::st::Unit<DB> getSizeType(
        const %1%<T0>& container,
        typename TypeHandler<DB, %1%<T0>>::type returnArg) {
      auto r0 = returnArg.write((uintptr_t)&(container.get()));

      if (pointers.add((uintptr_t)&container.get())) {
        return r0.template delegate<1>([&container](auto ret) {
          return OIInternal::getSizeType<DB>(container.get(), ret);
        });
      } else {
        return r0.template delegate<0>(std::identity());
      }
    }
};
"""

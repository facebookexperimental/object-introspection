[info]
type_name = "std::vector"
stub_template_params = [1]
ctype = "SEQ_TYPE"
header = "vector"

# Old:
typeName = "std::vector<"
ns = ["namespace std"]
numTemplateParams = 1
allocatorIndex = 1

[codegen]
decl = """
template<typename T, typename Allocator>
void getSizeType(const %1%<T, Allocator> &container, size_t& returnArg);
"""

func = """
template<typename T, typename Allocator>
void getSizeType(const %1%<T, Allocator> &container, size_t& returnArg)
{
    SAVE_SIZE(sizeof(%1%<T>));

    SAVE_DATA((uintptr_t)&container);
    SAVE_DATA((uintptr_t)container.capacity());
    SAVE_DATA((uintptr_t)container.size());

    SAVE_SIZE((container.capacity() - container.size()) * sizeof(T));

    // The double ampersand is needed otherwise this loop doesn't work with vector<bool>
    for (auto&& it: container) {
    getSizeType(it, returnArg);
    }
}
"""

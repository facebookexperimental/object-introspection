[info]
type_name = "folly::sorted_vector_map"
ctype = "MAP_SEQ_TYPE"
header = "folly/sorted_vector_types.h"
stub_template_params = [2,3]

# Old:
typeName = "folly::sorted_vector_map<"
ns = ["namespace std", "folly::sorted_vector_map"]
numTemplateParams = 2
replaceTemplateParamIndex = []

[codegen]
decl = """
template <class Key, class Value, class Compare, class Allocator, class GrowthPolicy, class Container>
void getSizeType(const %1%<Key, Value, Compare, Allocator, GrowthPolicy, Container> &container, size_t& returnArg);
"""

func = """
template <class Key, class Value, class Compare, class Allocator, class GrowthPolicy, class Container>
void getSizeType(const %1%<Key, Value, Compare, Allocator, GrowthPolicy, Container> &container, size_t& returnArg)
{
    SAVE_SIZE(sizeof(%1%<Key,Value,Compare,Allocator,GrowthPolicy,Container>));

    SAVE_DATA((uintptr_t)&container);
    SAVE_DATA((uintptr_t)container.capacity());
    SAVE_DATA((uintptr_t)container.size());

    SAVE_SIZE((container.capacity() - container.size()) * (sizeof(Key) + sizeof(Value)));

    for (auto const& it : container)
    {
        getSizeType(it.first, returnArg);
        getSizeType(it.second, returnArg);
    }
}
"""
handler = """
template <typename DB, typename T0, typename T1, typename T2, typename T3, typename T4, typename T5>
struct TypeHandler<DB, %1%<T0, T1, T2, T3, T4, T5>> {
  using type = types::st::Pair<DB,
      types::st::VarInt<DB>,
      types::st::Pair<DB,
        types::st::VarInt<DB>,
        types::st::List<DB, types::st::Pair<DB,
          typename TypeHandler<DB, T0>::type,
          typename TypeHandler<DB, T1>::type
    >>>>;

  static types::st::Unit<DB> getSizeType(
      const %1%<T0, T1, T2, T3, T4, T5>& container,
      typename TypeHandler<DB, %1%<T0, T1, T2, T3, T4, T5>>::type returnArg) {
    auto tail = returnArg.write((uintptr_t)&container)
                    .write(container.capacity())
                    .write(container.size());

    for (const auto& it : container) {
      tail = tail.delegate([&it](auto ret) {
        return OIInternal::getSizeType<DB>(it.second, ret.delegate([&it](auto ret) {
            return OIInternal::getSizeType<DB>(it.first, ret);
        }));
      });
    }

    return tail.finish();
  }
};
"""

[info]
type_name = "std::shared_ptr"
ctype = "SHRD_PTR_TYPE"
header = "memory"

# Old:
typeName = "std::shared_ptr"
ns = ["namespace std"]
numTemplateParams = 1
replaceTemplateParamIndex = []

[codegen]
decl = """
template<typename T>
void getSizeType(const %1%<T> &s_ptr, size_t& returnArg);
"""

func = """
template<typename T>
void getSizeType(const %1%<T> &s_ptr, size_t& returnArg)
{
    SAVE_SIZE(sizeof(%1%<T>));

    if constexpr (!std::is_void<T>::value) {
        SAVE_DATA((uintptr_t)(s_ptr.get()));

        if (s_ptr && pointers.add((uintptr_t)(s_ptr.get()))) {
            SAVE_DATA(1);
            getSizeType(*(s_ptr.get()), returnArg);
        } else {
            SAVE_DATA(0);
        }
    }
}
"""

handler = """
template <typename DB, typename T0>
struct TypeHandler<DB, %1%<T0>> {
    using type = typename std::conditional<
      std::is_void<T0>::value,
      types::st::Unit<DB>,
      types::st::Pair<DB,
        types::st::VarInt<DB>,
        types::st::Sum<DB,
          types::st::Unit<DB>,
          typename TypeHandler<DB, T0>::type
      >>>::type;

    static types::st::Unit<DB> getSizeType(
        const %1%<T0>& container,
        typename TypeHandler<DB, %1%<T0>>::type returnArg) {
      if constexpr (!std::is_void<T0>::value) {
        auto r0 = returnArg.write((uintptr_t)(container.get()));
        if (container && pointers.add((uintptr_t)(container.get()))) {
          return r0.template delegate<1>([&container](auto ret) {
            return OIInternal::getSizeType<DB>(*(container.get()), ret);
          });
        } else {
          return r0.template delegate<0>(std::identity());
        }
      } else {
        return returnArg;
      }
    }
};
"""

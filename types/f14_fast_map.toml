[info]
type_name = "folly::F14FastMap"
stub_template_params = [2,3,4]
ctype = "F14_MAP"
header = "folly/container/F14Map.h"

# Old:
typeName = "folly::F14FastMap<"
ns = ["folly::F14FastMap"]
numTemplateParams = 2
replaceTemplateParamIndex = [2, 3]
allocatorIndex = 4

[codegen]
decl = """
template <typename Key, typename Mapped, typename Hasher, typename KeyEqual, typename Alloc>
void getSizeType(const %1%<Key, Mapped, Hasher, KeyEqual, Alloc> &container, size_t& dataSegOffset);
"""

func = """
template <typename Key, typename Mapped, typename Hasher, typename KeyEqual, typename Alloc>
void getSizeType(const %1%<Key, Mapped, Hasher, KeyEqual, Alloc> &container, size_t& returnArg)
{
    size_t memorySize = container.getAllocatedMemorySize();
    SAVE_SIZE(sizeof(%1%<Key, Mapped, Hasher, KeyEqual>) + memorySize);

    SAVE_DATA(memorySize);
    SAVE_DATA(container.bucket_count());
    SAVE_DATA(container.size());

    // The double ampersand is needed otherwise this loop doesn't work with vector<bool>
    for (auto&& it: container) {
        getSizeType(it.first, returnArg);
        getSizeType(it.second, returnArg);
    }
}
"""

traversal_func = """
auto tail = returnArg
  .write((uintptr_t)container.getAllocatedMemorySize())
  .write((uintptr_t)container.bucket_count())
  .write(container.size());

for (auto &&entry: container) {
  tail = tail.delegate([&key = entry.first, &value = entry.second](auto ret) {
    auto next = ret.delegate([&key](typename TypeHandler<DB, T0>::type ret) {
      return OIInternal::getSizeType<DB>(key, ret);
    });
    return OIInternal::getSizeType<DB>(value, next);
  });
}

return tail.finish();
"""

[[codegen.processor]]
type = "types::st::VarInt<DB>"
func = "el.pointer = std::get<ParsedData::VarInt>(d.val).value;"

[[codegen.processor]]
type = "types::st::VarInt<DB>"
func = """
el.container_stats.emplace(result::Element::ContainerStats {
  .capacity = std::get<ParsedData::VarInt>(d.val).value,
});
"""

[[codegen.processor]]
type = """
types::st::List<DB, types::st::Pair<DB,
  typename TypeHandler<DB, T0>::type,
  typename TypeHandler<DB, T1>::type>>
"""
func = """
static constexpr size_t element_size = sizeof(typename container_type::value_type);

auto allocationSize = el.pointer.value();
el.pointer.reset();

auto list = std::get<ParsedData::List>(d.val);
el.container_stats->length = list.length;

el.exclusive_size += allocationSize - list.length * element_size;

static constexpr std::array<inst::Field, 2> element_fields{
  make_field<DB, T0>("key"),
  make_field<DB, T1>("value"),
};

static constexpr inst::Field element{
  element_size,
  element_size - sizeof(T0) - sizeof(T1),
  "[]",
  std::array<std::string_view, 0>{},
  element_fields,
  std::array<inst::ProcessorInst, 0>{},
};

for (size_t i = 0; i < list.length; i++)
  stack_ins(element);
"""

[info]
type_name = "std::optional"
ctype = "OPTIONAL_TYPE"
header = "optional"

# Old:
typeName = "std::optional<"
ns = ["namespace std"]
numTemplateParams = 1

[codegen]
decl = """
template<typename T>
void getSizeType(const %1%<T> &container, size_t& returnArg);
"""

func = """
template <typename T>
void getSizeType(const %1%<T>& container, size_t& returnArg) {
  if (container) {
    SAVE_SIZE(sizeof(%1%<T>) - sizeof(T));
    SAVE_DATA(true);
    getSizeType(*container, returnArg);
  } else {
    SAVE_SIZE(sizeof(%1%<T>));
    SAVE_DATA(false);
  }
}
"""

traversal_func = """
if (container.has_value()) {
  return returnArg.template delegate<1>([&ctx, &container](auto ret) {
    return OIInternal::getSizeType<Ctx>(ctx, *container, ret);
  });
} else {
  return returnArg.template delegate<0>(std::identity());
}
"""

[[codegen.processor]]
type = "types::st::Sum<DB, types::st::Unit<DB>, typename TypeHandler<Ctx, T0>::type>"
func = """
static constexpr std::array<std::string_view, 1> names{"TODO"};
static constexpr auto elementField = inst::Field{
  sizeof(T0),
  "el",
  names,
  TypeHandler<Ctx, T0>::fields,
  TypeHandler<Ctx, T0>::processors,
};

auto sum = std::get<ParsedData::Sum>(d.val);

el.container_stats = result::Element::ContainerStats {
  .capacity = 1,
  .length = sum.index,
};

if (sum.index == 1) {
  el.exclusive_size -= sizeof(T0);
  stack_ins(elementField);
}
"""

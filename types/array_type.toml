[info]
type_name = "std::array"
ctype = "ARRAY_TYPE"
header = "array"

# Old:
numTemplateParams = 1
ns = ["namespace std"]
typeName = "std::array<"

[codegen]
decl = """
template<typename T, long unsigned int N>
void getSizeType(const %1%<T, N> &container, size_t& returnArg);
"""

func = """
template<typename T, long unsigned int N>
void getSizeType(const %1%<T,N> &container, size_t& returnArg)
{
    SAVE_DATA((uintptr_t)container.size());
    SAVE_SIZE(sizeof(container));

    for (auto & it: container) {
        // undo the static size that has already been added per-element
        SAVE_SIZE(-sizeof(it));
        getSizeType(it, returnArg);
    }
}
"""

traversal_func = """
    auto tail = returnArg.write(container.size());

    for (auto & it: container) {
        tail = tail.delegate([&ctx, &it](auto ret) {
            return TypeHandler<Ctx, T0>::getSizeType(ctx, it, ret);
        });
    }

    return tail.finish();
"""

[[codegen.processor]]
type = "types::st::List<DB, typename TypeHandler<Ctx, T0>::type>"
func = """
static constexpr auto childField = make_field<Ctx, T0>("[]");

size_t size = std::get<ParsedData::List>(d.val).length;
el.exclusive_size = N0 == 0 ? 1 : 0;
el.container_stats.emplace(result::Element::ContainerStats{ .capacity = size, .length = size });
for (size_t i = 0; i < size; i++)
  stack_ins(childField);
"""

[info]
type_name = "std::priority_queue"
ctype = "CONTAINER_ADAPTER_TYPE"
header = "queue"
underlying_container_index = 1
stub_template_params = [2]

# Old:
typeName = "std::priority_queue<"
ns = ["namespace std"]
replaceTemplateParamIndex = []
underlyingContainerIndex = 1

[codegen]
decl = """
template<class T, class Container, class Cmp>
void getSizeType(const %1%<T, Container, Cmp> &container, size_t& returnArg);
"""

func = """
template<class T, class Container, class Cmp>
void getSizeType(const %1%<T, Container, Cmp> &containerAdapter, size_t& returnArg)
{
    SAVE_DATA((uintptr_t)&containerAdapter);

    // Only record the overhead of this container adapter - don't count the
    // underlying container as that will be taken care of in its own
    // getSizeType() function
    SAVE_SIZE(sizeof(%1%<T, Container>) - sizeof(Container));

    const Container &container = get_container(containerAdapter);
    getSizeType(container, returnArg);
}
"""

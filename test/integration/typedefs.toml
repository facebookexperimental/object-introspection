includes = ["vector"]
definitions = '''
  typedef uint64_t TdUInt64;
  using UsingUInt64 = uint64_t;
  using IntVector = std::vector<int>;
'''
[cases]
  [cases.c_style]
    param_types = ["TdUInt64"]
    setup = "return {};"
    expect_json = '''[{
      "staticSize":8,
      "dynamicSize":0,
      "isTypedef":true,
      "typeName":"TdUInt64",
      "members":[
        {
          "staticSize":8,
          "dynamicSize":0,
          "isTypedef":false,
          "typeName":"uint64_t",
          "NOT":"members"
        }
      ]}]'''
  [cases.using]
    param_types = ["UsingUInt64"]
    setup = "return {};"
    expect_json = '''[{
      "staticSize":8,
      "dynamicSize":0,
      "isTypedef":true,
      "typeName":"UsingUInt64",
      "members":[
        {
          "staticSize":8,
          "dynamicSize":0,
          "isTypedef":false,
          "typeName":"uint64_t",
          "NOT":"members"
        }
      ]}]'''
  [cases.container]
    param_types = ["const IntVector&"]
    setup = "return {};"
    expect_json = '''[{
      "staticSize":24,
      "dynamicSize":0,
      "isTypedef":true,
      "typeName":"IntVector",
      "members":[
        {
          "staticSize":24,
          "dynamicSize":0,
          "length":0,
          "capacity":0,
          "elementStaticSize":4,
          "isTypedef":false,
          "typeName":"vector<int, std::allocator<int> >",
          "NOT":"members"
        }
      ]}]'''
